# GENETARED BY NNDCT, DO NOT EDIT!

import torch
from torch import tensor
import pytorch_nndct as py_nndct

class PFLDInferenceDPU(py_nndct.nn.NndctQuantModel):
    def __init__(self):
        super(PFLDInferenceDPU, self).__init__()
        self.module_0 = py_nndct.nn.Input() #PFLDInferenceDPU::input_0(PFLDInferenceDPU::nndct_input_0)
        self.module_1 = py_nndct.nn.Conv2d(in_channels=3, out_channels=32, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[conv1]/ret.3(PFLDInferenceDPU::nndct_conv2d_1)
        self.module_2 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/ReLU[relu1]/6516(PFLDInferenceDPU::nndct_relu_2)
        self.module_3 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[conv2]/ret.7(PFLDInferenceDPU::nndct_conv2d_3)
        self.module_4 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/ReLU[relu2]/6544(PFLDInferenceDPU::nndct_relu_4)
        self.module_5 = py_nndct.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv3_1]/Sequential[conv]/Conv2d[0]/ret.11(PFLDInferenceDPU::nndct_conv2d_5)
        self.module_6 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv3_1]/Sequential[conv]/ReLU[2]/6572(PFLDInferenceDPU::nndct_relu_6)
        self.module_7 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=64, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv3_1]/Sequential[conv]/Conv2d[3]/ret.15(PFLDInferenceDPU::nndct_depthwise_conv2d_7)
        self.module_8 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv3_1]/Sequential[conv]/ReLU[5]/6600(PFLDInferenceDPU::nndct_relu_8)
        self.module_9 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv3_1]/Sequential[conv]/Conv2d[6]/ret.19(PFLDInferenceDPU::nndct_conv2d_9)
        self.module_10 = py_nndct.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block3_2]/Sequential[conv]/Conv2d[0]/ret.23(PFLDInferenceDPU::nndct_conv2d_10)
        self.module_11 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block3_2]/Sequential[conv]/ReLU[2]/6655(PFLDInferenceDPU::nndct_relu_11)
        self.module_12 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=64, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block3_2]/Sequential[conv]/Conv2d[3]/ret.27(PFLDInferenceDPU::nndct_depthwise_conv2d_12)
        self.module_13 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block3_2]/Sequential[conv]/ReLU[5]/6683(PFLDInferenceDPU::nndct_relu_13)
        self.module_14 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block3_2]/Sequential[conv]/Conv2d[6]/ret.31(PFLDInferenceDPU::nndct_conv2d_14)
        self.module_15 = py_nndct.nn.Add() #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block3_2]/ret.35(PFLDInferenceDPU::nndct_elemwise_add_15)
        self.module_16 = py_nndct.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block3_3]/Sequential[conv]/Conv2d[0]/ret.37(PFLDInferenceDPU::nndct_conv2d_16)
        self.module_17 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block3_3]/Sequential[conv]/ReLU[2]/6741(PFLDInferenceDPU::nndct_relu_17)
        self.module_18 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=64, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block3_3]/Sequential[conv]/Conv2d[3]/ret.41(PFLDInferenceDPU::nndct_depthwise_conv2d_18)
        self.module_19 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block3_3]/Sequential[conv]/ReLU[5]/6769(PFLDInferenceDPU::nndct_relu_19)
        self.module_20 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block3_3]/Sequential[conv]/Conv2d[6]/ret.45(PFLDInferenceDPU::nndct_conv2d_20)
        self.module_21 = py_nndct.nn.Add() #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block3_3]/ret.49(PFLDInferenceDPU::nndct_elemwise_add_21)
        self.module_22 = py_nndct.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv4_1]/Sequential[conv]/Conv2d[0]/ret.51(PFLDInferenceDPU::nndct_conv2d_22)
        self.module_23 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv4_1]/Sequential[conv]/ReLU[2]/6827(PFLDInferenceDPU::nndct_relu_23)
        self.module_24 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=64, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv4_1]/Sequential[conv]/Conv2d[3]/ret.55(PFLDInferenceDPU::nndct_depthwise_conv2d_24)
        self.module_25 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv4_1]/Sequential[conv]/ReLU[5]/6855(PFLDInferenceDPU::nndct_relu_25)
        self.module_26 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv4_1]/Sequential[conv]/Conv2d[6]/ret.59(PFLDInferenceDPU::nndct_conv2d_26)
        self.module_27 = py_nndct.nn.Conv2d(in_channels=64, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv5_1]/Sequential[conv]/Conv2d[0]/ret.63(PFLDInferenceDPU::nndct_conv2d_27)
        self.module_28 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv5_1]/Sequential[conv]/ReLU[2]/6910(PFLDInferenceDPU::nndct_relu_28)
        self.module_29 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=128, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv5_1]/Sequential[conv]/Conv2d[3]/ret.67(PFLDInferenceDPU::nndct_depthwise_conv2d_29)
        self.module_30 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv5_1]/Sequential[conv]/ReLU[5]/6938(PFLDInferenceDPU::nndct_relu_30)
        self.module_31 = py_nndct.nn.Conv2d(in_channels=128, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv5_1]/Sequential[conv]/Conv2d[6]/ret.71(PFLDInferenceDPU::nndct_conv2d_31)
        self.module_32 = py_nndct.nn.Conv2d(in_channels=64, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block5_2]/Sequential[conv]/Conv2d[0]/ret.75(PFLDInferenceDPU::nndct_conv2d_32)
        self.module_33 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block5_2]/Sequential[conv]/ReLU[2]/6993(PFLDInferenceDPU::nndct_relu_33)
        self.module_34 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=128, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block5_2]/Sequential[conv]/Conv2d[3]/ret.79(PFLDInferenceDPU::nndct_depthwise_conv2d_34)
        self.module_35 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block5_2]/Sequential[conv]/ReLU[5]/7021(PFLDInferenceDPU::nndct_relu_35)
        self.module_36 = py_nndct.nn.Conv2d(in_channels=128, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block5_2]/Sequential[conv]/Conv2d[6]/ret.83(PFLDInferenceDPU::nndct_conv2d_36)
        self.module_37 = py_nndct.nn.Add() #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block5_2]/ret.87(PFLDInferenceDPU::nndct_elemwise_add_37)
        self.module_38 = py_nndct.nn.Conv2d(in_channels=64, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block5_3]/Sequential[conv]/Conv2d[0]/ret.89(PFLDInferenceDPU::nndct_conv2d_38)
        self.module_39 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block5_3]/Sequential[conv]/ReLU[2]/7079(PFLDInferenceDPU::nndct_relu_39)
        self.module_40 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=128, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block5_3]/Sequential[conv]/Conv2d[3]/ret.93(PFLDInferenceDPU::nndct_depthwise_conv2d_40)
        self.module_41 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block5_3]/Sequential[conv]/ReLU[5]/7107(PFLDInferenceDPU::nndct_relu_41)
        self.module_42 = py_nndct.nn.Conv2d(in_channels=128, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block5_3]/Sequential[conv]/Conv2d[6]/ret.97(PFLDInferenceDPU::nndct_conv2d_42)
        self.module_43 = py_nndct.nn.Add() #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[block5_3]/ret.101(PFLDInferenceDPU::nndct_elemwise_add_43)
        self.module_44 = py_nndct.nn.Conv2d(in_channels=64, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv6_1]/Sequential[conv]/Conv2d[0]/ret.103(PFLDInferenceDPU::nndct_conv2d_44)
        self.module_45 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv6_1]/Sequential[conv]/ReLU[2]/7165(PFLDInferenceDPU::nndct_relu_45)
        self.module_46 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=128, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv6_1]/Sequential[conv]/Conv2d[3]/ret.107(PFLDInferenceDPU::nndct_depthwise_conv2d_46)
        self.module_47 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv6_1]/Sequential[conv]/ReLU[5]/7193(PFLDInferenceDPU::nndct_relu_47)
        self.module_48 = py_nndct.nn.Conv2d(in_channels=128, out_channels=16, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/InvertedResidual[conv6_1]/Sequential[conv]/Conv2d[6]/ret.111(PFLDInferenceDPU::nndct_conv2d_48)
        self.module_49 = py_nndct.nn.Conv2d(in_channels=16, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l7_l14_conv]/ret.115(PFLDInferenceDPU::nndct_conv2d_49)
        self.module_50 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/ReLU[l7_l14_act]/7248(PFLDInferenceDPU::nndct_relu_50)
        self.module_51 = py_nndct.nn.Interpolate() #PFLDInferenceDPU::PFLDInferenceDPU/Upsample[upsample]/ret.119(PFLDInferenceDPU::nndct_resize_51)
        self.module_52 = py_nndct.nn.Module('nndct_shape') #PFLDInferenceDPU::PFLDInferenceDPU/7296(PFLDInferenceDPU::nndct_shape_52)
        self.module_53 = py_nndct.nn.Module('nndct_shape') #PFLDInferenceDPU::PFLDInferenceDPU/7299(PFLDInferenceDPU::nndct_shape_53)
        self.module_54 = py_nndct.nn.Interpolate() #PFLDInferenceDPU::PFLDInferenceDPU/ret.123(PFLDInferenceDPU::nndct_resize_54)
        self.module_55 = py_nndct.nn.Cat() #PFLDInferenceDPU::PFLDInferenceDPU/ret.125(PFLDInferenceDPU::nndct_concat_55)
        self.module_56 = py_nndct.nn.Conv2d(in_channels=128, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l14_fusion_conv]/ret.127(PFLDInferenceDPU::nndct_conv2d_56)
        self.module_57 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/ReLU[l14_fusion_act]/7342(PFLDInferenceDPU::nndct_relu_57)
        self.module_58 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l14_l28_conv]/ret.131(PFLDInferenceDPU::nndct_conv2d_58)
        self.module_59 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/ReLU[l14_l28_act]/7370(PFLDInferenceDPU::nndct_relu_59)
        self.module_60 = py_nndct.nn.Interpolate() #PFLDInferenceDPU::PFLDInferenceDPU/Upsample[upsample]/ret.135(PFLDInferenceDPU::nndct_resize_60)
        self.module_61 = py_nndct.nn.Cat() #PFLDInferenceDPU::PFLDInferenceDPU/ret.141(PFLDInferenceDPU::nndct_concat_61)
        self.module_62 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l28_fusion_conv]/ret.143(PFLDInferenceDPU::nndct_conv2d_62)
        self.module_63 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/ReLU[l28_fusion_act]/7444(PFLDInferenceDPU::nndct_relu_63)
        self.module_64 = py_nndct.nn.Conv2d(in_channels=32, out_channels=64, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l28_l14_conv]/ret.147(PFLDInferenceDPU::nndct_conv2d_64)
        self.module_65 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/ReLU[l28_l14_act]/7472(PFLDInferenceDPU::nndct_relu_65)
        self.module_66 = py_nndct.nn.Cat() #PFLDInferenceDPU::PFLDInferenceDPU/ret.155(PFLDInferenceDPU::nndct_concat_66)
        self.module_67 = py_nndct.nn.Conv2d(in_channels=128, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l14r_fusion_conv]/ret.157(PFLDInferenceDPU::nndct_conv2d_67)
        self.module_68 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/ReLU[l14r_fusion_act]/7540(PFLDInferenceDPU::nndct_relu_68)
        self.module_69 = py_nndct.nn.Conv2d(in_channels=64, out_channels=16, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l14_l7_conv]/ret.161(PFLDInferenceDPU::nndct_conv2d_69)
        self.module_70 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/ReLU[l14_l7_act]/7568(PFLDInferenceDPU::nndct_relu_70)
        self.module_71 = py_nndct.nn.Module('nndct_shape') #PFLDInferenceDPU::PFLDInferenceDPU/7610(PFLDInferenceDPU::nndct_shape_71)
        self.module_72 = py_nndct.nn.Module('nndct_shape') #PFLDInferenceDPU::PFLDInferenceDPU/7613(PFLDInferenceDPU::nndct_shape_72)
        self.module_73 = py_nndct.nn.Interpolate() #PFLDInferenceDPU::PFLDInferenceDPU/ret.167(PFLDInferenceDPU::nndct_resize_73)
        self.module_74 = py_nndct.nn.Cat() #PFLDInferenceDPU::PFLDInferenceDPU/ret.169(PFLDInferenceDPU::nndct_concat_74)
        self.module_75 = py_nndct.nn.Conv2d(in_channels=32, out_channels=16, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l7r_fusion_conv]/ret.171(PFLDInferenceDPU::nndct_conv2d_75)
        self.module_76 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/ReLU[l7r_fusion_act]/7656(PFLDInferenceDPU::nndct_relu_76)
        self.module_77 = py_nndct.nn.Conv2d(in_channels=16, out_channels=16, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l7_head_conv]/ret.175(PFLDInferenceDPU::nndct_conv2d_77)
        self.module_78 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/ReLU[l7_head_act]/7684(PFLDInferenceDPU::nndct_relu_78)
        self.module_79 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[7, 7]) #PFLDInferenceDPU::PFLDInferenceDPU/AdaptiveAvgPool2d[l7_pool]/7701(PFLDInferenceDPU::nndct_adaptive_avg_pool2d_79)
        self.module_80 = py_nndct.nn.Conv2d(in_channels=16, out_channels=196, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l7_anchor1]/ret.179(PFLDInferenceDPU::nndct_conv2d_80)
        self.module_81 = py_nndct.nn.Conv2d(in_channels=16, out_channels=196, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l7_anchor2]/ret.181(PFLDInferenceDPU::nndct_conv2d_81)
        self.module_82 = py_nndct.nn.Conv2d(in_channels=16, out_channels=196, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l7_anchor3]/ret.183(PFLDInferenceDPU::nndct_conv2d_82)
        self.module_83 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l14_head_conv]/ret.185(PFLDInferenceDPU::nndct_conv2d_83)
        self.module_84 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/ReLU[l14_head_act]/7790(PFLDInferenceDPU::nndct_relu_84)
        self.module_85 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[14, 14]) #PFLDInferenceDPU::PFLDInferenceDPU/AdaptiveAvgPool2d[l14_pool]/7807(PFLDInferenceDPU::nndct_adaptive_avg_pool2d_85)
        self.module_86 = py_nndct.nn.Conv2d(in_channels=64, out_channels=196, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l14_anchor1]/ret.189(PFLDInferenceDPU::nndct_conv2d_86)
        self.module_87 = py_nndct.nn.Conv2d(in_channels=64, out_channels=196, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l14_anchor2]/ret.191(PFLDInferenceDPU::nndct_conv2d_87)
        self.module_88 = py_nndct.nn.Conv2d(in_channels=64, out_channels=196, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l14_anchor3]/ret.193(PFLDInferenceDPU::nndct_conv2d_88)
        self.module_89 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l28_head_conv]/ret.195(PFLDInferenceDPU::nndct_conv2d_89)
        self.module_90 = py_nndct.nn.ReLU(inplace=True) #PFLDInferenceDPU::PFLDInferenceDPU/ReLU[l28_head_act]/7896(PFLDInferenceDPU::nndct_relu_90)
        self.module_91 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[28, 28]) #PFLDInferenceDPU::PFLDInferenceDPU/AdaptiveAvgPool2d[l28_pool]/7913(PFLDInferenceDPU::nndct_adaptive_avg_pool2d_91)
        self.module_92 = py_nndct.nn.Conv2d(in_channels=32, out_channels=196, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l28_anchor1]/ret.199(PFLDInferenceDPU::nndct_conv2d_92)
        self.module_93 = py_nndct.nn.Conv2d(in_channels=32, out_channels=196, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l28_anchor2]/ret.201(PFLDInferenceDPU::nndct_conv2d_93)
        self.module_94 = py_nndct.nn.Conv2d(in_channels=32, out_channels=196, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #PFLDInferenceDPU::PFLDInferenceDPU/Conv2d[l28_anchor3]/ret(PFLDInferenceDPU::nndct_conv2d_94)

    @py_nndct.nn.forward_processor
    def forward(self, *args):
        output_module_0 = self.module_0(input=args[0])
        output_module_0 = self.module_1(output_module_0)
        output_module_0 = self.module_2(output_module_0)
        output_module_0 = self.module_3(output_module_0)
        output_module_0 = self.module_4(output_module_0)
        output_module_0 = self.module_5(output_module_0)
        output_module_0 = self.module_6(output_module_0)
        output_module_0 = self.module_7(output_module_0)
        output_module_0 = self.module_8(output_module_0)
        output_module_0 = self.module_9(output_module_0)
        output_module_10 = self.module_10(output_module_0)
        output_module_10 = self.module_11(output_module_10)
        output_module_10 = self.module_12(output_module_10)
        output_module_10 = self.module_13(output_module_10)
        output_module_10 = self.module_14(output_module_10)
        output_module_15 = self.module_15(input=output_module_0, other=output_module_10, alpha=1)
        output_module_16 = self.module_16(output_module_15)
        output_module_16 = self.module_17(output_module_16)
        output_module_16 = self.module_18(output_module_16)
        output_module_16 = self.module_19(output_module_16)
        output_module_16 = self.module_20(output_module_16)
        output_module_21 = self.module_21(input=output_module_15, other=output_module_16, alpha=1)
        output_module_22 = self.module_22(output_module_21)
        output_module_22 = self.module_23(output_module_22)
        output_module_22 = self.module_24(output_module_22)
        output_module_22 = self.module_25(output_module_22)
        output_module_22 = self.module_26(output_module_22)
        output_module_22 = self.module_27(output_module_22)
        output_module_22 = self.module_28(output_module_22)
        output_module_22 = self.module_29(output_module_22)
        output_module_22 = self.module_30(output_module_22)
        output_module_22 = self.module_31(output_module_22)
        output_module_32 = self.module_32(output_module_22)
        output_module_32 = self.module_33(output_module_32)
        output_module_32 = self.module_34(output_module_32)
        output_module_32 = self.module_35(output_module_32)
        output_module_32 = self.module_36(output_module_32)
        output_module_37 = self.module_37(input=output_module_22, other=output_module_32, alpha=1)
        output_module_38 = self.module_38(output_module_37)
        output_module_38 = self.module_39(output_module_38)
        output_module_38 = self.module_40(output_module_38)
        output_module_38 = self.module_41(output_module_38)
        output_module_38 = self.module_42(output_module_38)
        output_module_43 = self.module_43(input=output_module_37, other=output_module_38, alpha=1)
        output_module_44 = self.module_44(output_module_43)
        output_module_44 = self.module_45(output_module_44)
        output_module_44 = self.module_46(output_module_44)
        output_module_44 = self.module_47(output_module_44)
        output_module_44 = self.module_48(output_module_44)
        output_module_49 = self.module_49(output_module_44)
        output_module_49 = self.module_50(output_module_49)
        output_module_49 = self.module_51(input=output_module_49, size=None, scale_factor=[2.0,2.0], mode='nearest')
        output_module_52 = self.module_52(input=output_module_43, dim=2)
        output_module_53 = self.module_53(input=output_module_43, dim=3)
        output_module_49 = self.module_54(input=output_module_49, size=[output_module_52,output_module_53], scale_factor=None, mode='nearest')
        output_module_49 = self.module_55(dim=1, tensors=[output_module_49,output_module_43])
        output_module_49 = self.module_56(output_module_49)
        output_module_49 = self.module_57(output_module_49)
        output_module_58 = self.module_58(output_module_49)
        output_module_58 = self.module_59(output_module_58)
        output_module_58 = self.module_60(input=output_module_58, size=None, scale_factor=[2.0,2.0], mode='nearest')
        output_module_58 = self.module_61(dim=1, tensors=[output_module_58,output_module_21])
        output_module_58 = self.module_62(output_module_58)
        output_module_58 = self.module_63(output_module_58)
        output_module_64 = self.module_64(output_module_58)
        output_module_64 = self.module_65(output_module_64)
        output_module_64 = self.module_66(dim=1, tensors=[output_module_64,output_module_49])
        output_module_64 = self.module_67(output_module_64)
        output_module_64 = self.module_68(output_module_64)
        output_module_69 = self.module_69(output_module_64)
        output_module_69 = self.module_70(output_module_69)
        output_module_71 = self.module_71(input=output_module_44, dim=2)
        output_module_72 = self.module_72(input=output_module_44, dim=3)
        output_module_69 = self.module_73(input=output_module_69, size=[output_module_71,output_module_72], scale_factor=None, mode='nearest')
        output_module_69 = self.module_74(dim=1, tensors=[output_module_69,output_module_44])
        output_module_69 = self.module_75(output_module_69)
        output_module_69 = self.module_76(output_module_69)
        output_module_69 = self.module_77(output_module_69)
        output_module_69 = self.module_78(output_module_69)
        output_module_69 = self.module_79(output_module_69)
        output_module_80 = self.module_80(output_module_69)
        output_module_81 = self.module_81(output_module_69)
        output_module_82 = self.module_82(output_module_69)
        output_module_83 = self.module_83(output_module_64)
        output_module_83 = self.module_84(output_module_83)
        output_module_83 = self.module_85(output_module_83)
        output_module_86 = self.module_86(output_module_83)
        output_module_87 = self.module_87(output_module_83)
        output_module_88 = self.module_88(output_module_83)
        output_module_89 = self.module_89(output_module_58)
        output_module_89 = self.module_90(output_module_89)
        output_module_89 = self.module_91(output_module_89)
        output_module_92 = self.module_92(output_module_89)
        output_module_93 = self.module_93(output_module_89)
        output_module_94 = self.module_94(output_module_89)
        return (output_module_80,output_module_81,output_module_82,output_module_86,output_module_87,output_module_88,output_module_92,output_module_93,output_module_94,output_module_58)
